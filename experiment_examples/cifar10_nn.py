"""
@author: staceytruex
"""
from inference_evaluation import run_inference_experiment, final_evaluation
import numpy as np
from keras.datasets import cifar10
import os
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = '-1'


class Arguments:
    def __init__(self, n_runs=1,
                 target_data_loc='./data/cifar10/target/', attacker_data_loc='./data/cifar10/attacker/',
                 target_train_def='./model_repository/cifar10_classifier.py',
                 n_shadow=100, shadow_train_def='./model_repository/cifar10_classifier.py',
                 attack_train_def='./model_repository/attack_model.py',
                 labels=('airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')):
        self.n_runs = n_runs
        self.target_data_loc = target_data_loc
        self.attacker_data_loc = attacker_data_loc
        self.target_train_def = target_train_def
        self.n_shadow = n_shadow
        self.shadow_train_def = shadow_train_def
        self.attack_train_def = attack_train_def
        self.labels = labels


def generate_data(target_location, attacker_location):
    (x_train, y_train), (x_test, y_test) = cifar10.load_data()
    x = np.concatenate([x_train, x_test])
    y = np.concatenate([y_train, y_test])

    x = x.astype('float32')
    x /= 255

    indices = np.arange(len(y))
    target_indices = np.random.choice(indices, 15000, replace=False)
    indices = np.setdiff1d(indices, target_indices)
    test_indices = np.random.choice(indices, 15000, replace=False)
    indices = np.setdiff1d(indices, test_indices)
    attacker_indices = np.random.choice(indices, 30000, replace=False)
    
    if not os.path.isdir(target_location):
        os.makedirs(target_location)
    if not os.path.isdir(attacker_location):
        os.makedirs(attacker_location)

    np.save(target_location + '/train_x.npy', x[target_indices])
    np.save(target_location + '/train_y.npy', y[target_indices])
    np.save(target_location + '/test_x.npy', x[test_indices])
    np.save(target_location + '/test_y.npy', y[test_indices])
    np.save(attacker_location + '/data_x.npy', x[attacker_indices])
    np.save(attacker_location + '/data_y.npy', y[attacker_indices])


if __name__ == '__main__':
    args = Arguments()
    generate_data(target_location=args.target_data_loc, attacker_location=args.attacker_data_loc)
    results = run_inference_experiment(args)
    if results is None:
        print('Error executing experiment.')
    else:
        for _ in np.arange(args.n_runs-1):
            generate_data(target_location=args.target_data_loc, attacker_location=args.attacker_data_loc)
            r = run_inference_experiment(args)
            results.append(r[0])
        print('Final result averaged from total of {} runs:'.format(args.n_runs))
        final_evaluation(results)
