"""
@author: staceytruex
"""
from inference_evaluation import run_inference_experiment, final_evaluation
import numpy as np
import pandas as pd
import os
import sys
from sklearn import preprocessing


class Arguments:
    def __init__(self, n_runs=10,
                 target_data_loc='./data/adult/target/', attacker_data_loc='./data/adult/attacker/',
                 target_train_def='/model_repository/adult_classifier.py',
                 n_shadow=100, shadow_train_def='/model_repository/adult_classifier.py',
                 attack_train_def='/model_repository/attack_model.py',
                 labels=('<=50K', '>50K')):
        self.n_runs = n_runs
        self.target_data_loc = target_data_loc
        self.attacker_data_loc = attacker_data_loc
        self.target_train_def = os.path.dirname(os.getcwd()) + target_train_def
        self.n_shadow = n_shadow
        self.shadow_train_def = os.path.dirname(os.getcwd()) + shadow_train_def
        self.attack_train_def = os.path.dirname(os.getcwd()) + attack_train_def
        self.labels = labels


def generate_data(data_source, target_location, attacker_location):
    x_train = pd.read_csv(data_source)
    x_train.columns = ['age', 'workclass', 'fnlwgt', 'education', 'education.num', 'marital.status', 'occupation',
                       'relationship', 'race', 'sex', 'capital.gain', 'capital.loss', 'hours.per.week',
                       'native.country', 'target']

    # Label encoding
    for x in x_train.columns:
        if x_train[x].dtype == 'object':
            lbl = preprocessing.LabelEncoder()
            lbl.fit(list(x_train[x].values))
            x_train[x] = lbl.transform(list(x_train[x].values))

    y_train = x_train['target']
    del x_train['target']

    x = x_train.to_numpy()
    y = y_train.to_numpy()

    indices = np.arange(len(y))
    size = int(len(y) / 4)
    target_indices = np.random.choice(indices, size, replace=False)
    indices = np.setdiff1d(indices, target_indices)
    test_indices = np.random.choice(indices, size, replace=False)
    indices = np.setdiff1d(indices, test_indices)
    attacker_indices = np.random.choice(indices, 2 * size, replace=False)

    if not os.path.isdir(target_location):
        os.makedirs(target_location)
    if not os.path.isdir(attacker_location):
        os.makedirs(attacker_location)

    np.save(target_location + '/train_x.npy', x[target_indices])
    np.save(target_location + '/train_y.npy', y[target_indices])
    np.save(target_location + '/test_x.npy', x[test_indices])
    np.save(target_location + '/test_y.npy', y[test_indices])
    np.save(attacker_location + '/data_x.npy', x[attacker_indices])
    np.save(attacker_location + '/data_y.npy', y[attacker_indices])


if __name__ == '__main__':
    sys.argv.append('C:/Users/newma/OneDrive/GaTech/Research/Fall 19/membership_vulnerability/experiment_examples/data/'
                    'adult/raw_data.txt')
    if len(sys.argv) < 2:
        print('Please provide data location.')
        sys.exit()
    if not os.path.exists(sys.argv[1]):
        print('Data location provided is not valid. Please provide a valid data location.')
        sys.exit()

    data_dir = sys.argv[1]
    args = Arguments()
    generate_data(data_source=data_dir,
                  target_location=args.target_data_loc, attacker_location=args.attacker_data_loc)
    results = run_inference_experiment(args)
    if results is None:
        print('Error executing experiment.')
    else:
        for _ in np.arange(args.n_runs - 1):
            generate_data(data_source=data_dir,
                          target_location=args.target_data_loc, attacker_location=args.attacker_data_loc)
            r = run_inference_experiment(args)
            results.append(r[0])
        print('Final result averaged from total of {} runs:'.format(args.n_runs))
        final_evaluation(results)
