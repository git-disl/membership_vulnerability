"""
@author: staceytruex
"""
import gc
from sklearn.tree import DecisionTreeClassifier


class Model:
    def __init__(self, model=None, criterion='gini', splitter='best', max_depth=None, min_samples_split=2,
                 min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None,
                 max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None,
                 presort=False, sample_weight=None):
        self.model = model
        self.criterion = criterion
        self.splitter = splitter
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.min_samples_leaf = min_samples_leaf
        self.min_weight_fraction_leaf = min_weight_fraction_leaf
        self.max_features = max_features
        self.random_state = random_state
        self.max_leaf_nodes = max_leaf_nodes
        self.min_impurity_decrease = min_impurity_decrease
        self.min_impurity_split = min_impurity_split
        self.class_weight = class_weight
        self.presort = presort
        self.sample_weight = sample_weight

    # noinspection PyUnusedLocal
    def train(self, train_data, test_data):
        X_train, Y_train = train_data

        model = DecisionTreeClassifier(criterion=self.criterion, splitter=self.splitter, max_depth=self.max_depth,
                                       min_samples_split=self.min_samples_split, min_samples_leaf=self.min_samples_leaf,
                                       min_weight_fraction_leaf=self.min_weight_fraction_leaf,
                                       max_features=self.max_features, random_state=self.random_state,
                                       max_leaf_nodes=self.max_leaf_nodes,
                                       min_impurity_decrease=self.min_impurity_decrease,
                                       min_impurity_split=self.min_impurity_split, class_weight=self.class_weight,
                                       presort=self.presort)
        model.fit(X_train, Y_train, sample_weight=self.sample_weight)

        self.model = model

    def evaluate(self, eval_data):
        return self.model.predict_proba(eval_data)

    def clear_model(self):
        self.model = None
        gc.collect()
